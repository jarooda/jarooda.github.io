---
import Anchor from "./shared/Anchor.astro"
---

<script is:inline>
  document.addEventListener(
    "astro:page-load",
    () => {
      if (!Matter) {
        return
      }

      let Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse,
        Composite = Matter.Composite,
        Bodies = Matter.Bodies

      // create engine
      const engine = Engine.create(),
        world = engine.world

      const container = document.getElementById("matter-js")
      if (!container) {
        return
      }
      const containerWidth = container.offsetWidth
      const containerHeight = container.offsetHeight

      let isDebugging = false
      // create renderer
      const render = Render.create({
        element: container,
        engine: engine,
        options: {
          width: containerWidth,
          height: containerHeight,
          wireframes: isDebugging,
          showIds: isDebugging,
          showAngleIndicator: isDebugging,
          background: "transparent"
        }
      })

      // create runner
      const runner = Runner.create()
      Runner.run(runner, engine)

      function getRandomX() {
        return container.offsetWidth / 2
      }

      function getY() {
        return Math.floor(
          container.offsetHeight * 0.05 +
            Math.random() * container.offsetHeight * 0.2
        )
      }

      function getOption(scale, unit) {
        if (container.offsetWidth < 425) {
          const newScale = scale - 1

          return {
            scale: newScale,
            unit: Math.ceil(unit / scale) * newScale
          }
        }

        return {
          scale,
          unit
        }
      }

      function createIcon(texture, type, option = {}) {
        const width = option.width || 40
        const height = option.height || 40
        const radius = option.radius || 20
        const scale = option.scale || 3
        const slope = option.slope || 0.5
        const sides = option.sides || 5

        const options = {
          render: {
            sprite: {
              texture: generateUrl(texture),
              xScale: getOption(scale, scale).scale,
              yScale: getOption(scale, scale).scale
            }
          }
        }

        switch (type) {
          case "circle":
            return Bodies.circle(
              getRandomX(),
              getY(),
              getOption(scale, radius).unit,
              options
            )
          case "trapezoid":
            return Bodies.trapezoid(
              getRandomX(),
              getY(),
              getOption(scale, width).unit,
              getOption(scale, height).unit,
              slope,
              options
            )
          case "polygon":
            return Bodies.polygon(
              getRandomX(),
              getY(),
              sides,
              getOption(scale, radius).unit,
              options
            )
          default:
            return Bodies.rectangle(
              getRandomX(),
              getY(),
              getOption(scale, width).unit,
              getOption(scale, height).unit,
              options
            )
        }
      }

      function generateUrl(filename) {
        return `https://res.cloudinary.com/dpcjjs0wg/image/upload/v1731991834/${filename}.svg`
      }
      const icons = [
        {
          url: "logos--vue_xvrlr9",
          shape: "trapezoid",
          options: { width: 6, height: 50, slope: -10 }
        },
        {
          url: "logos--react_bl3k6d",
          shape: "polygon",
          options: { sides: 12, radius: 32 }
        },
        {
          url: "logos--astro-icon_vjwx9z",
          shape: "trapezoid",
          options: { width: 40, height: 50, slope: 0.3 }
        },
        {
          url: "logos--aws_fgyb8m",
          shape: "rectangle",
          options: { width: 55, height: 40, scale: 2 }
        },
        {
          url: "logos--cloudflare-icon_mdfvde",
          shape: "trapezoid",
          options: { width: 70, height: 35, slope: 0.5, scale: 2 }
        },
        {
          url: "logos--css-3_ldlex2",
          shape: "rectangle",
          options: { width: 30, height: 48 }
        },
        {
          url: "logos--html-5_syoy4b",
          shape: "rectangle",
          options: { width: 30, height: 48 }
        },
        {
          url: "logos--javascript_kpeloj",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--typescript-icon_jey5r1",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--tailwindcss-icon_kmcoki",
          shape: "rectangle",
          options: { width: 55, height: 35, scale: 2 }
        },
        {
          url: "logos--firebase_i9whnq",
          shape: "polygon",
          options: { sides: 4, radius: 29 }
        },
        {
          url: "logos--google-cloud_gtpb5b",
          shape: "trapezoid",
          options: { width: 70, height: 45, slope: 0.5 }
        },
        {
          url: "logos--mongodb-icon_ja5hur",
          shape: "rectangle",
          options: { width: 25, height: 45 }
        },
        {
          url: "logos--postgresql_olcugm",
          shape: "polygon",
          options: { sides: 12, radius: 25 }
        },
        {
          url: "logos--remix-icon_v8fk6t",
          shape: "rectangle",
          options: { width: 38, height: 45 }
        },
        // {
        //   url: "logos--rust_qyuou3",
        //   shape: "circle",
        //   options: { radius: 25 }
        // },
        {
          url: "logos--php_m0tm9q",
          shape: "rectangle",
          options: { width: 68, height: 40 }
        },
        {
          url: "logos--wordpress_bml2jm",
          shape: "circle",
          options: { radius: 20 }
        },
        {
          url: "logos--express_agc18f",
          shape: "rectangle",
          options: { width: 110, height: 35, scale: 2 }
        },
        {
          url: "logos--pinia_jdqmfc",
          shape: "rectangle",
          options: { width: 40, height: 45 }
        },
        {
          url: "logos--nodejs-icon_oywclz",
          shape: "polygon",
          options: { sides: 6, radius: 25 }
        },
        {
          url: "logos--npm-icon_me451n",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--yarn_qwtrtq",
          shape: "circle",
          options: { radius: 25 }
        },
        {
          url: "logos--visual-studio-code_lhvv6b",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--jest_rbzrdy",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--graphql_k5yi7x",
          shape: "polygon",
          options: { sides: 6, radius: 25 }
        },
        {
          url: "logos--vercel-icon_imodls",
          shape: "trapezoid",
          options: { width: 60, height: 50, slope: 1 }
        },
        {
          url: "logos--sass_zljcvh",
          shape: "rectangle",
          options: { width: 55, height: 45 }
        },
        {
          url: "logos--gitlab_dbhr4c",
          shape: "circle",
          options: { radius: 28 }
        },
        {
          url: "logos--ruby_ur5lpa",
          shape: "rectangle",
          options: { width: 48, height: 48 }
        },
        {
          url: "logos--github-icon_vdzn05",
          shape: "circle",
          options: { radius: 25 }
        },
        {
          url: "logos--redis_ixfulj",
          shape: "rectangle",
          options: { width: 60, height: 48 }
        },
        {
          url: "logos--bootstrap_plhgmx",
          shape: "rectangle",
          options: { width: 57, height: 48 }
        },
        {
          url: "logos--git-icon_gtlej6",
          shape: "polygon",
          options: { sides: 6, radius: 28 }
        },
        {
          url: "logos--figma_x8aqqc",
          shape: "rectangle",
          options: { width: 35, height: 50 }
        },
        {
          url: "logos--pnpm_ayeayi",
          shape: "rectangle",
          options: { width: 70, height: 50 }
        }
      ]

      const stack = Composite.create()

      function shuffle(array) {
        let currentIndex = array.length,
          randomIndex

        while (currentIndex != 0) {
          randomIndex = Math.floor(Math.random() * currentIndex)
          currentIndex--
          ;[array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex]
          ]
        }

        return array
      }

      shuffle(icons)

      function loadImg(url, onSuccess) {
        const imgUrl = generateUrl(url)
        const img = new Image()
        img.crossOrigin = "anonymous"
        img.onload = () => {
          onSuccess()
        }
        img.onerror = () => {
          console.info(`Image not rendered: ${imgUrl}, check your connection`)
        }
        img.src = imgUrl
      }

      icons.forEach((icon) => {
        loadImg(icon.url, () => {
          const createdIcon = createIcon(icon.url, icon.shape, icon.options)
          Composite.add(stack, createdIcon)
        })
      })

      function getWallThickness(thickness) {
        if (container.offsetWidth < 425) {
          return thickness / 10
        }
        return thickness
      }

      function getWall(wallWidth, wallHeight, wallThickness) {
        const topWall = Bodies.rectangle(
          wallWidth / 2,
          0,
          wallWidth,
          getWallThickness(wallThickness),
          {
            isStatic: true,
            render: { fillStyle: "transparent" }
          }
        )
        const bottomWall = Bodies.rectangle(
          wallWidth / 2,
          wallHeight,
          wallWidth,
          wallThickness / 10,
          { isStatic: true }
        )
        const rightWall = Bodies.rectangle(
          wallWidth,
          wallHeight / 2,
          getWallThickness(wallThickness),
          wallHeight,
          {
            isStatic: true,
            render: { fillStyle: "transparent" }
          }
        )
        const leftWall = Bodies.rectangle(
          0,
          wallHeight / 2,
          getWallThickness(wallThickness),
          wallHeight,
          {
            isStatic: true,
            render: { fillStyle: "transparent" }
          }
        )

        return { topWall, bottomWall, rightWall, leftWall }
      }

      const { topWall, bottomWall, rightWall, leftWall } = getWall(
        containerWidth,
        containerHeight,
        100
      )
      Composite.add(world, [
        // walls
        topWall,
        bottomWall,
        rightWall,
        leftWall
      ])

      // add mouse control
      const mouse = Mouse.create(render.canvas),
        mouseConstraint = MouseConstraint.create(engine, {
          mouse: mouse,
          constraint: {
            stiffness: 0.2,
            render: {
              visible: false
            }
          }
        })
      mouseConstraint.mouse.element.removeEventListener(
        "wheel",
        mouseConstraint.mouse.mousewheel
      )
      mouseConstraint.mouse.element.removeEventListener(
        "DOMMouseScroll",
        mouseConstraint.mouse.mousewheel
      )
      mouseConstraint.mouse.element.removeEventListener(
        "touchmove",
        mouseConstraint.mouse.mousemove
      )
      mouseConstraint.mouse.element.removeEventListener(
        "touchstart",
        mouseConstraint.mouse.mousedown
      )
      mouseConstraint.mouse.element.removeEventListener(
        "touchend",
        mouseConstraint.mouse.mouseup
      )
      Composite.add(world, mouseConstraint)
      // keep the mouse in sync with rendering
      render.mouse = mouse

      function addStacks() {
        const randomIcon = icons[Math.floor(Math.random() * icons.length)]
        loadImg(randomIcon.url, () => {
          const createdIcon = createIcon(
            randomIcon.url,
            randomIcon.shape,
            randomIcon.options
          )
          Composite.add(stack, createdIcon)
        })
      }

      // using window observer, if id techstacks is visible, then run the render
      let observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              Composite.add(world, stack)
              Render.run(render)
              observer.unobserve(entry.target)
            }
          })
        },
        { threshold: 0.6 }
      )
      const techstacksSection = container
      observer.observe(techstacksSection)

      const addButton = document.getElementById("add")
      if (addButton) {
        addButton.addEventListener("click", () => {
          addStacks()
        })
      }

      const toggleWireframeButton = document.getElementById(
        "toggle-wireframe"
      )
      if (toggleWireframeButton) {
        toggleWireframeButton.addEventListener("click", () => {
          isDebugging = !isDebugging
          render.options.wireframes = isDebugging
          render.options.showIds = isDebugging
          render.options.showAngleIndicator = isDebugging
        })
      }

      window.addEventListener("resize", () => {
        render.options.width = container.offsetWidth
        render.options.height = container.offsetHeight
        render.canvas.width = container.offsetWidth
        render.canvas.height = container.offsetHeight

        const { topWall, bottomWall, rightWall, leftWall } = getWall(
          container.offsetWidth - 2,
          container.offsetHeight - 2,
          100
        )

        Composite.add(world, [
          // walls
          topWall,
          bottomWall,
          rightWall,
          leftWall
        ])
      })
    },
    { once: true }
  )
</script>

<section
  id="techstacks"
  class="max-w-screen-2xl mx-auto justify-center flex flex-col bg-gray-200 dark:bg-gray-900 text-gray-700 dark:text-gray-300 transition-colors duration-200 pt-5"
>
  <div class="mx-auto w-full lg:w-256 py-4 px-4 md:py-12">
    <div
      class="w-full flex flex-col md:flex-row text-center gap-0 md:gap-4 text-2xl md:text-5xl font-semibold"
    >
      <h1 class="shrink-0">Tech Stacks</h1>
      <div class="flex w-full md:justify-end justify-center">
        <button
          id="add"
          data-test="add-stack-button"
          class="p-0 m-0 flex h-min w-fit items-center mt-3 md:mt-0"
        >
          <Anchor href="javascript:void(0)" icon="mdi:shape-add">
            Add Stack
          </Anchor>
        </button>
        <!-- <button
          id="toggle-wireframe"
          data-test="toggle-wireframe-button"
          class="ml-3 p-0 m-0 flex h-min w-fit items-center mt-3 md:mt-0"
        >
          <Anchor href="javascript:void(0)" icon="mdi:bug-play-outline">
            Toggle Wireframe
          </Anchor>
        </button> -->
      </div>
    </div>
  </div>
  <div class="w-full h-128">
    <div id="matter-js" data-test="techstack-canvas" class="w-full h-full cursor-grab"></div>
  </div>
</section>
