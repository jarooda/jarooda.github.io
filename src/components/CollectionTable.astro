---
interface Props {
  id: string;
  data: any[];
  renderKeys: string[];
}

const { id, data, renderKeys } = Astro.props;
const tableHeaders = renderKeys.map(key => 
  key.charAt(0).toUpperCase() + key.slice(1)
);
const columnWidth = `${100 / renderKeys.length}%`;
---

<div id={id} class="collection-table" style="display: none;">
  {data.length > 0 && (
    <div class="overflow-x-auto">
      <table class="w-full border-collapse">
        <thead>
          <tr class="border-b-2 border-gray-200 dark:border-gray-700">
            {tableHeaders.map((header) => (
              <th class="px-6 py-3 text-left font-semibold text-gray-700 dark:text-gray-300" style={`width: ${columnWidth}`}>
                {header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr class="border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors">
              {renderKeys.map((key) => (
                <td class="px-6 py-4 text-gray-600 dark:text-gray-400" style={`width: ${columnWidth}`}>
                  {item[key] || ""}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )}
</div>
