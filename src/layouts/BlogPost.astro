---
import { ClientRouter } from 'astro:transitions';
import { Image } from "astro:assets"
import type { CollectionEntry } from 'astro:content';
import { Icon } from 'astro-icon/components'
import BaseHead from '../components/shared/BaseHead.astro';
import BlogHead from '../components/shared/BlogHead.astro';
import Header from '../components/shared/Header.astro';
import Footer from '../components/shared/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import '../styles/base.css'
import '../styles/blogs.css'
import { SITE_TITLE } from '../consts';

type AstroProps = CollectionEntry<'blog'>['data'];
interface Props extends AstroProps {
  remark?: any;
  headings: {
    depth: number
    slug: string
    text: string
  }[]
}

const { title, description, pubDate, updatedDate, heroImage, metaImage, remark, headings, tags, otherUrl } = Astro.props;
const headerTitle = title + ' - Article by ' + SITE_TITLE

const removeSRLabel = (text: string) => {
  const labelStart = text.indexOf('Section titled')
  return text.substring(0, labelStart)
}

const calculateMarginLeft = (depth: number) => {
  return `${2 * (depth - 1)}rem`
}

const isEnglish = tags.includes('english')
---

<html lang="en">
  <head>
    <link href="/themes/prism.css" rel="stylesheet" />
		<BaseHead title={ headerTitle } description={description} image={ metaImage || heroImage } />
    <BlogHead />
    <ClientRouter />
	</head>

	<body class="bg-white dark:bg-gray-900 text-gray-700 dark:text-gray-300 transition-colors duration-200">
		<Header hasSeparator={ false } />
		<main class=" pt-16">
			<article>
				<div>
					{heroImage && <Image width={1020} height={510} src={heroImage} alt="hero" class=" w-full max-h-96 object-cover object-center" loading="eager" />}
				</div>
				<div class=" font-lato w-full lg:w-224 mx-auto p-4">
					<div class=" flex flex-col">
            <h1 class=" text-4xl font-bold text-center mt-1 md:mt-5">{title}</h1>
            <div class=" flex justify-center gap-2 my-2">
              {
                tags.map((tag: string) => (
                  <a href={ `/tags/${ tag }` } class="text-xs md:text-sm hover:underline underline-offset-2">
                    #{ tag }
                  </a>
                ))
              }
            </div>
						<div class=" mt-2 gap2 flex flex-col">
              <div class=" flex gap-1 items-center">
                <Icon name="mdi:calendar-multiselect" class="h-4 max-w-10" />
                <p class=" text-sm md:text-base">
                  <FormattedDate date={pubDate} />
                </p>
              </div>
              <div class=" flex gap-1 items-center">
                <Icon name="mdi:clock-time-two-outline" class="h-4 max-w-10" />
                <p class=" text-sm md:text-base">
                  <span>{
                    remark.minutesRead
                  }</span>
                </p>
              </div>
              {
                otherUrl && !isEnglish && (
                  <div class=" flex gap-1 items-center">
                    <p>âœ¨</p>
                    <a
                      href={ otherUrl }
                      class=" text-sm md:text-base text-green-900 dark:text-green-700 font-semibold underline underline-offset-2 hover:text-green-700 dark:hover:text-green-500"
                    >ðŸ‡¬ðŸ‡§ Read in English</a>
                    <p>âœ¨</p>
                  </div>
                )
              }
              {
                otherUrl && isEnglish && (
                  <div class=" flex gap-1 items-center">
                    <p>âœ¨</p>
                    <a
                      href={ otherUrl }
                      class=" text-sm md:text-base text-green-900 dark:text-green-700 font-semibold underline underline-offset-2 hover:text-green-700 dark:hover:text-green-500"
                    >ðŸ‡®ðŸ‡© Read in Indonesian</a>
                    <p>âœ¨</p>
                  </div>
                )
              }
						</div>

            <div>
              <hr class=" my-3" />
              <blockquote class="relative">
                <svg class="absolute size-5 md:size-8 md:-left-2 text-gray-400" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                  <path d="M7.39762 10.3C7.39762 11.0733 7.14888 11.7 6.6514 12.18C6.15392 12.6333 5.52552 12.86 4.76621 12.86C3.84979 12.86 3.09047 12.5533 2.48825 11.94C1.91222 11.3266 1.62421 10.4467 1.62421 9.29999C1.62421 8.07332 1.96459 6.87332 2.64535 5.69999C3.35231 4.49999 4.33418 3.55332 5.59098 2.85999L6.4943 4.25999C5.81354 4.73999 5.26369 5.27332 4.84476 5.85999C4.45201 6.44666 4.19017 7.12666 4.05926 7.89999C4.29491 7.79332 4.56983 7.73999 4.88403 7.73999C5.61716 7.73999 6.21938 7.97999 6.69067 8.45999C7.16197 8.93999 7.39762 9.55333 7.39762 10.3ZM14.6242 10.3C14.6242 11.0733 14.3755 11.7 13.878 12.18C13.3805 12.6333 12.7521 12.86 11.9928 12.86C11.0764 12.86 10.3171 12.5533 9.71484 11.94C9.13881 11.3266 8.85079 10.4467 8.85079 9.29999C8.85079 8.07332 9.19117 6.87332 9.87194 5.69999C10.5789 4.49999 11.5608 3.55332 12.8176 2.85999L13.7209 4.25999C13.0401 4.73999 12.4903 5.27332 12.0713 5.85999C11.6786 6.44666 11.4168 7.12666 11.2858 7.89999C11.5215 7.79332 11.7964 7.73999 12.1106 7.73999C12.8437 7.73999 13.446 7.97999 13.9173 8.45999C14.3886 8.93999 14.6242 9.55333 14.6242 10.3Z" fill="currentColor"></path>
                </svg>
              
                <div class="relative z-10">
                  <p class="sm:text-xl pl-6"><em>
                      {description}
                    </em></p>
                </div>
              </blockquote>
            </div>
						<hr class=" my-3" />
					</div>
          <div class=" blog">
            <aside>
              <h1 class="font-semibold text-gray-900 dark:text-gray-100">Contents</h1>
              <ul class="space-y-1 pl-5 lg:pl-0">
                {
                  headings.map(({ depth, slug, text }) => (
                    slug !== 'footnote-label' && <li style={{ marginLeft: calculateMarginLeft(depth) }} class="list-disc ml-5">
                      <a href={`#${slug}`} class="font-semibold text-green-900 dark:text-green-700 underline underline-offset-2 hover:text-green-700 dark:hover:text-green-500">{removeSRLabel(text)}</a>
                    </li>
                  ))
                }
              </ul>
            </aside>
            <hr class=" my-3" />
            <astro-fenced-block>
              <astro-blog-img>
                <slot />
              </astro-blog-img>
            </astro-fenced-block>
          </div>
          {
            updatedDate && (
              <p class=" italic font-light text-sm md:text-base mt-1">
                Update: <FormattedDate date={updatedDate} />
              </p>
            )
          }
          
          <!-- Utterances Comments Container -->
          <div id="utterances-container"></div>
          
          <script>
            // Set Utterances theme dynamically and create the script element
            function initializeUtterances() {
              const container = document.getElementById('utterances-container');
              if (!container) return;
              
              // Clear any existing utterances
              container.innerHTML = '';
              
              const isDark = document.documentElement.classList.contains('dark');
              const theme = isDark ? 'github-dark' : 'github-light';
              
              // Create script element with all required attributes
              const script = document.createElement('script');
              script.src = 'https://utteranc.es/client.js';
              script.setAttribute('data-repo', 'jarooda/jarooda.github.io');
              script.setAttribute('data-issue-term', 'pathname');
              script.setAttribute('data-label', 'blog-comment');
              script.setAttribute('data-theme', theme);
              script.setAttribute('crossorigin', 'anonymous');
              script.async = true;
              
              // Insert the script into the container
              container.appendChild(script);
            }
            
            // Reload Utterances with new theme
            function reloadUtterances() {
              const container = document.getElementById('utterances-container');
              if (!container) return;
              
              // Clear the container completely
              container.innerHTML = '';
              
              // Wait a bit for cleanup, then reinitialize
              setTimeout(() => {
                initializeUtterances();
              }, 150);
            }

            // Override the theme toggle handler to also update Utterances
            function enhanceThemeToggle() {
              const themeToggle = document.getElementById("theme-toggle");
              if (themeToggle && window.themeToggleHandler) {
                const originalHandler = window.themeToggleHandler;
                
                window.themeToggleHandler = function(e) {
                  originalHandler(e);
                  // Always reload Utterances with new theme after a short delay
                  setTimeout(() => {
                    reloadUtterances();
                  }, 200);
                };
                
                // Remove old handler and add enhanced one
                themeToggle.removeEventListener('click', originalHandler);
                themeToggle.addEventListener('click', window.themeToggleHandler);
              }
            }

            // Initialize everything
            initializeUtterances();
            
            // Enhance theme toggle when it's available
            function tryEnhanceThemeToggle() {
              const themeToggle = document.getElementById("theme-toggle");
              if (themeToggle) {
                enhanceThemeToggle();
              } else {
                // Try again after a short delay
                setTimeout(tryEnhanceThemeToggle, 500);
              }
            }
            
            // Start trying to enhance the theme toggle
            tryEnhanceThemeToggle();
            
            // Also listen for Astro page loads
            document.addEventListener("astro:page-load", () => {
              initializeUtterances();
              tryEnhanceThemeToggle();
            });
          </script>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
