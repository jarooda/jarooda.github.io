---
import type { CollectionEntry } from 'astro:content';
import { Icon } from 'astro-icon'
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import '../styles/base.css'
import '../styles/blogs.css'
import { SITE_TITLE } from '../consts';

type AstroProps = CollectionEntry<'blog'>['data'];
interface Props extends AstroProps {
  remark?: any;
  headings: {
    depth: number
    slug: string
    text: string
  }[]
}

const { title, description, pubDate, updatedDate, heroImage, remark, headings } = Astro.props;
const headerTitle = title + ' - ' + SITE_TITLE

const removeSRLabel = (text: string) => {
  const labelStart = text.indexOf('Section titled')
  return text.substring(0, labelStart)
}

const calculateMarginLeft = (depth: number) => {
  return `${2 * (depth - 1)}rem`
}
---

<html lang="en">
  <script>
    let copyButtonLabel = "Copy Code";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className = "copy-code";
      copyButton.innerHTML = copyButtonLabel;

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);
      // wrap codebock with relative parent element
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      // visual feedback that task is completed
      button.innerText = "Code Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  </script>
	<head>
		<BaseHead title={ headerTitle } description={description} image={ heroImage } />
	</head>

	<body>
		<Header hasSeparator={ false } />
		<main class=" pt-16">
			<article>
				<div>
					{heroImage && <img width={1020} height={510} src={heroImage} alt="hero" class=" w-full max-h-96 object-cover object-center" />}
				</div>
				<div class=" font-inter w-full lg:w-224 mx-auto p-4">
					<div class=" flex flex-col">
            <h1 class=" text-4xl font-bold">{title}</h1>
						<div class=" mt-2 gap2 flex flex-col">
              <div class=" flex gap-1 items-center">
                <Icon name="mdi:calendar-multiselect" class="h-4 max-w-10" />
                <p class=" text-base md:text-sm">
                  <FormattedDate date={pubDate} />
                </p>
              </div>
              <div class=" flex gap-1 items-center">
                <Icon name="mdi:clock-time-two-outline" class="h-4 max-w-10" />
                <p class=" text-base md:text-sm">
                  <span>{
                    remark.minutesRead
                  }</span>
                </p>
              </div>
							{
								updatedDate && (
                  <p class=" font-light text-base md:text-sm mt-1">
										Last updated on <FormattedDate date={updatedDate} />
                  </p>
								)
							}
						</div>
						<hr class=" my-3" />
					</div>
          <div class=" blog">
            <aside>
              <h2 class="font-semibold text-black">Contents</h2>
              <ul>
                {
                  headings.map(({ depth, slug, text }) => (
                    <li style={{ marginLeft: calculateMarginLeft(depth) }} class=" list-inside">
                      <a href={`#${slug}`}>{removeSRLabel(text)}</a>
                    </li>
                  ))
                }
              </ul>
            </aside>
            <hr class=" my-3" />
            <slot />
          </div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
