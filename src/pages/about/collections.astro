---
import { ClientRouter } from "astro:transitions"
import { getCollection } from "astro:content"

import BaseHead from "../../components/shared/BaseHead.astro"
import Header from "../../components/shared/Header.astro"
import Footer from "../../components/shared/Footer.astro"
import CollectionContent from "../../components/CollectionContent.md"
import CollectionTable from "../../components/CollectionTable.astro"
import Anchor from "../../components/shared/Anchor.astro"

import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts"
import "../../styles/base.css"
import "../../styles/blogs.css"

const title = "My Collections | " + SITE_TITLE + " - Frontend Developer"

const lists = [
  {
    title: "Games",
    description: "A collection of games that I've played",
    link: "/about/collections?for=games",
    buttonText: "Games",
    renderKeys: ["title", "developer", "platform", "status"]
  },
  {
    title: "Figures",
    description: "A collection of figures that I've collected.",
    link: "/about/collections?for=figures",
    buttonText: "Figures",
    renderKeys: ["name", "series", "manufacturer"]
  }
];

// Get query parameter
const collectionType = Astro.url.searchParams.get("for") || "games";

// Fetch both collections
const games = await getCollection("games");
const figures = await getCollection("figures");

const gamesData = games.map(game => game.data);
const figurinesData = figures.map(figurine => figurine.data);

// Prepare data for both collections
const collectionsData = {
  games: {
    data: gamesData,
    config: lists.find(list => list.title.toLowerCase() === "games")
  },
  figures: {
    data: figurinesData,
    config: lists.find(list => list.title.toLowerCase() === "figures")
  }
};
---

<!doctype html>
<html lang="en">
  <head>
    <meta name="robots" content="noindex, nofollow" />
    <link href="/themes/prism.css" rel="stylesheet" />
    <BaseHead title={title} description={SITE_DESCRIPTION} />
    <script src="../../utils/anchor-removal.ts" />
  </head>
  <body class="bg-white dark:bg-gray-900 font-inter transition-colors duration-200">
    <Header hasSeparator={false} />
    <main
      class="pt-20 mx-auto w-full lg:w-224 p-4 min-h-[calc(100vh-80px)] text-gray-700 dark:text-gray-300"
    >
      <astro-anchor-removal>
        <div class="blog">
          <CollectionContent />
        </div>
      </astro-anchor-removal>

      <nav id="collection-nav">
        <ul class="flex justify-center w-full gap-3 mb-8">
          {lists.map((list) => (
            <li>
              <Anchor
                href={list.link}
                dataCollection={list.title.toLowerCase()}
              >
                {list.title}
              </Anchor>
            </li>
          ))}
        </ul>
      </nav>

      <!-- Games Table -->
      <CollectionTable 
        id="games-table"
        data={collectionsData.games.data}
        renderKeys={collectionsData.games.config?.renderKeys || []}
      />

      <!-- Figures Table -->
      <CollectionTable 
        id="figures-table"
        data={collectionsData.figures.data}
        renderKeys={collectionsData.figures.config?.renderKeys || []}
      />

      <!-- No data message -->
      <div id="no-data" class="text-center py-8" style="display: none;">
        <p class="text-gray-500 dark:text-gray-400">No data available for this collection.</p>
      </div>

      <script define:vars={{ initialCollection: collectionType }}>
        // Get the actual collection type from the current URL
        const urlParams = new URLSearchParams(window.location.search);
        const actualCollectionType = urlParams.get('for') || 'games';
        
        function showCollection(collectionType, updateUrl = true) {
          // Hide all tables
          document.querySelectorAll('.collection-table').forEach(table => {
            table.style.display = 'none';
          });
          document.getElementById('no-data').style.display = 'none';
          
          // Show the selected table
          const tableId = collectionType + '-table';
          const table = document.getElementById(tableId);
          
          if (table) {
            table.style.display = 'block';
          } else {
            document.getElementById('no-data').style.display = 'block';
          }
          
          // Update URL without page reload only if requested
          if (updateUrl) {
            const url = new URL(window.location);
            url.searchParams.set('for', collectionType);
            window.history.replaceState({}, '', url);
          }
          
          // Update active navigation - only target collection nav links
          document.querySelectorAll('[data-collection]').forEach(link => {
            const linkCollection = link.getAttribute('data-collection');
            if (linkCollection === collectionType) {
              // Add active class or styling if needed
              link.setAttribute('data-active', 'true');
            } else {
              link.removeAttribute('data-active');
            }
          });
        }
        
        // Handle navigation clicks - only target collection nav links
        document.querySelectorAll('[data-collection]').forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const collectionType = link.getAttribute('data-collection');
            showCollection(collectionType, true);
          });
        });
        
        // Use the actual URL parameter instead of server-side value
        showCollection(actualCollectionType, false);
      </script>
    </main>
    <Footer />
  </body>
</html>